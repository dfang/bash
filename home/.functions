# in bash, `type foobar` or `declare -f foobar` can show function definition

# list all functions 
function funcs() {
  declare -F | grep -v _
}

function reload! () {
    echo "Reloading bash profile...!"
    source ~/.bash_profile
    echo "Reloaded!!!"
}
alias reload='reload!'
# Reload the shell (i.e. invoke as a login shell)
# alias reload="exec $SHELL -l"


function localip(){
  local a="Hello"
  echo $a
  ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'
}

# export http_proxy for brew install
# curl and wget only respect http_proxy and https_proxy, no HTTP_PROXY and HTTPs_PROXY
# curl respects all_proxy and ALL_PROXY, wget don't respect them
# tested in Mac(curl/wget http://google.com)
# https://www.shellhacks.com/linux-proxy-server-settings-set-proxy-command-line/
# https://unix.stackexchange.com/questions/212894/whats-the-right-format-for-the-http-proxy-environment-variable-caps-or-no-ca
# export https_proxy=$http_proxy HTTP_PROXY=$http_proxy HTTPS_PROXY=$http_proxy NO_PROXY=$no_proxy
proxy(){
    # local ip=$(ifconfig en9 | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}')
    local ip=127.0.0.1
    export http_proxy="http://$ip:8118" # http代理地址
    export no_proxy="localhost,127.0.0.0/0,192.168.0.0/16,10.0.0.0/0,kubernetes.docker.internal"
    # export {http,https,ftp}_proxy="http://`ipconfig getifaddr en0`:8118" # http代理地址
    # export {HTTP,HTTPS}_PROXY=$http_proxy
    export NO_PROXY=$no_proxy
    export HTTP_PROXY=$http_proxy https_proxy=$http_proxy HTTPS_PROXY=$http_proxy NO_PROXY=$no_proxy
    echo "HTTP Proxy on"
    env | grep -i proxy
}

noproxy(){
		unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY no_proxy NO_PROXY FTP_PROXY ftp_proxy ALL_PROXY all_proxy
    env | grep -i proxy
    echo -e "Proxy environment variable removed."
}


# run command x times https://gist.github.com/dfang/f35713fde8b8f311d8050fd2bd873c5b
function runx() {
  for ((n=0;n<$1;n++))
    do ${*:2}
  done
}

# Syntax: "repeat [X] [command]"
function repeat(){
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do  # --> C-like syntax
        eval "$@";
    done
}

function take() {
  mkdir -p "$1"
  cd "$1" || exit
}

function install_odoo_addons(){
  pip install --find-links https://wheelhouse.acsone.eu/oca-9.0/ $1
}

function deploy_the_last_commit(){
  git commit; git sync; cap deploy
}

# http://networkstatic.net/10-examples-of-how-to-get-docker-container-ip-address/
function docker_ip() {
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$@"
}

function docker_exec_bash() { 
  docker exec -i -t $@ bash ;
}

function psql_postgresl_container() {
  psql -h "$POSTGRES_PORT_5432_TCP_ADDR" -p "$POSTGRES_PORT_5432_TCP_PORT" -U postgres
}

function vg() {
  vagrant ${@}
}

function vg-debug() {
  VAGRANT_LOG=info vg ${@}
}


function is-bundler-installed(){
  which bundle > /dev/null 2>&1
}

function is-within-bundled-project(){
  local dir="$(pwd)"
  while [ "$(dirname $dir)" != "/" ]; do
    [ -f "$dir/Gemfile" ] && return
    dir="$(dirname $dir)"
  done
  false
}

function run-with-bundler(){
  if is-bundler-installed && is-within-bundled-project; then
    bundle exec $@
  else
    $@
  fi
}
BUNDLED_COMMANDS="rails rake rspec ruby sass sass-convert spec spork"
for CMD in $BUNDLED_COMMANDS; do
  alias $CMD="run-with-bundler $CMD"
done

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";
    echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
    if [ -z "${1}" -o -z "${2}" ]; then
        echo "Usage: \`gitio slug url\`";
        return 1;
    fi;
    curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}";
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
    local port="${1:-4000}";
    local ip=$(ipconfig getifaddr en1);
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else # pipe
        python -mjson.tool | pygmentize -l javascript;
    fi;
}

# Run `dig` and display the most useful info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Get a character’s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# `sb` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function sb() {
    if [ $# -eq 0 ]; then
        subl .;
    else
        subl "$@";
    fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
    if [ $# -eq 0 ]; then
        atom .;
    else
        atom "$@";
    fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given location
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


function trash() { 
    mv "$@" ~/.Trash; 
}

# https://docs.docker.com/compose/compose-file/#network_mode
# https://github.com/nicolaka/netshoot
function netshoot() {
  if [ -z "$1" ]  
    then
      echo "missing container name Or container id. Cancelled"; return
  else
      docker run -it --net container:"$1"  nicolaka/netshoot 
  fi
}

# https://github.com/junegunn/fzf/wiki/examples#with-fasd
# Quick tail log in /usr/local/var/log from homebrew
tlog() {
  local log
  # log=$(fd ${1:-.} -t file -e log -p /usr/local/var/log -d 2; fd ${1:-.} -t file -e log -p ~/Library/Logs -d 2| fzf +m) && echo "tail -f $log ............" && tail -f "$log"
  log=$((fd . -t file -e log '/usr/local/var/log'; fd . -t file -e log  '/Users/mj/Library/Logs/') | fzf)
  tail -f $log
}

# autojump
function j() {
  if [ -z "$1" ]  
    then
      fasd_cd -d $(fasd_cd -d -R | fzf --reverse)
  else
      fasd_cd -d $1
  fi
}

# select then jump to sub directory
function jsd() {
  cd `fd -t d | fzf --layout=reverse  --inline-info`
}

# function v open file from fzf
# export FZF_DEFAULT_OPTS='--height 100% --layout=reverse --border'
# export FZF_DEFAULT_COMMAND='fd --type f'
function v() {
  if [ -z "$1" ]  
    then
      # vi `fzf`
      vim $(fzf --height 100% --border --layout=reverse  --inline-info)
  else
      vi $1
  fi
}

# reload configuration
# curl -XPOST http://127.0.0.1:9115/-/reload

# Json tools (pipe unformatted to these to nicely format the JSON)
alias json="python -m json.tool"


function aws_list_regions(){
    echo "running aws ec2 describe-regions | jq '.Regions[].RegionName'  ....."
    aws ec2 describe-regions | jq '.Regions[].RegionName'
}

function aws_list_instance_types(){
    aws pricing get-attribute-values --service-code AmazonEC2  --attribute-name instanceType
}


function aws_list_instances(){
    echo "List instances in default region(~/.aws/config), or specify with --region"
    echo "running aws ec2 describe-instances ....."
    # aws ec2 describe-instances
    aws ec2 describe-instances | jq '.Reservations[] | ( .Instances[] | {state: .State.Name, name: .KeyName, type: .InstanceType, key: .KeyName, Tag_Name: .Tags[].Value})'
}

function aws_list_instances_status(){
    aws ec2 describe-instance-status
}


function aws_list_all_instances_in_all_regions(){
    for region in `aws ec2 describe-regions --output text | cut -f3`
    do
         echo -e "\nListing Instances in region:'$region'..."
         aws ec2 describe-instances --region $region | jq '.Reservations[] | ( .Instances[] | {state: .State.Name, name: .KeyName, type: .InstanceType, key: .KeyName, Tag_Name: .Tags[].Value})'
    done
}

# 经测试, minikube docker-env 里的HTTP_PROXY都应该是大写的
# 如果小写, https://docs.platform.hasura.io/0.15/platform/manual/install-hasura/minikube.html install platform Dial tcp 错误
function minikube-start(){
    minikube stop
    minikube delete
    minikube start  --vm-driver hyperkit \
                    --insecure-registry raspberrypi.local \
                    --registry-mirror https://registry.docker-cn.com \
                    --docker-env HTTP_PROXY=http://`ipconfig getifaddr en0`:8118 \
                    --docker-env HTTPS_PROXY=http://`ipconfig getifaddr en0`:8118 \
                    --docker-env NO_PROXY=127.0.0.1,localhost,192.168.0.0/16,10.0.0.0/8 \
                    --logtostderr \
                    --v=10 \
                    --extra-config=apiserver.Authorization.Mode=RBAC   
}

function clash_proxy(){
    export {http,https,ftp}_proxy="http://`ipconfig getifaddr en0`:8118" # http代理地址
    export {HTTP,HTTPS}_PROXY=$http_proxy
    export no_proxy="localhost,127.0.0.0/32,192.168.0.0/16"
    export NO_PROXY=$no_proxy
    echo "HTTP Proxy on"
    env | grep -i proxy
}

function set_git_proxy(){
    echo "set git http.proxy"
    echo "git config --global http.proxy $http_proxy"
    git config --global http.proxy $http_proxy
    git config --global https.proxy $http_proxy
    git config --global http.proxy
    git config --global https.proxy

}


function unset_git_proxy(){
    echo "unset git http.proxy"
    git config --global --unset http.proxy
    git config --global --unset https.proxy
    echo "git config --global -l"
    git config --global http.proxy
}

# restart services in docker-compose
docker-compose-restart(){
	docker-compose stop $@
	docker-compose rm -f -v $@
	docker-compose create --force-recreate $@
	docker-compose start $@
}

function god() {
	open http://localhost:6060/pkg
	godoc --http :6060
}


#
# Set enviroment variable "$1" to default value "$2" if "$1" is not yet defined.
#
# Arguments:
#    1. name - The env variable to set
#    2. val  - The default value
# Return value:
#    0 if the env variable exists, 3 if it was set
#
function env_default() {
    env | grep -q "^$1=" && return 0
    export "$1=$2"       && return 3
}


#
# Set variable "$1" to default value "$2" if "$1" is not yet defined.
#
# Arguments:
#    1. name - The variable to set
#    2. val  - The default value
# Return value:
#    0 if the variable exists, 3 if it was set
#
function default() {
    typeset -p "$1" &>/dev/null && return 0
    typeset -g "$1"="$2"   && return 3
}


#   ii:  display useful host related informaton
#   -------------------------------------------------------------------
ii() {
  echo -e "\\nYou are logged on ${red}$HOST"
  echo -e "\\nAdditionnal information:$NC " ; uname -a
  echo -e "\\n${red}Users logged on:$NC " ; w -h
  echo -e "\\n${red}Current date :$NC " ; date
  echo -e "\\n${red}Machine stats :$NC " ; uptime
  [[ "$OSTYPE" == darwin* ]] && echo -e "\\n${red}Current network location :$NC " ; scselect
  echo -e "\\n${red}Public facing IP Address :$NC " ;myip
  [[ "$OSTYPE" == darwin* ]] && echo -e "\\n${red}DNS Configuration:$NC " ; scutil --dns
  echo
}


#   usage: disk usage per directory, in Mac OS X and Linux
#   -------------------------------------------------------------------
usage () {
  if [ "$(uname)" = "Darwin" ]; then
    if [ -n "$1" ]; then
      du -hd 1 "$1"
    else
      du -hd 1
    fi
  elif [ "$(uname)" = "Linux" ]; then
    if [ -n "$1" ]; then
      du -h --max-depth=1 "$1"
    else
      du -h --max-depth=1
    fi
  fi
}

#   command_exists: checks for existence of a command (0 = true, 1 = false)
#   -------------------------------------------------------------------
command_exists () {
  type "$1" &> /dev/null ;
}


#
# Pushover Notifications
# Usage: pushover "Title Goes Here" "Message Goes Here"
# Credit: http://ryonsherman.blogspot.com/2012/10/shell-script-to-send-pushover.html
#
pushover () {
  PUSHOVERURL="https://api.pushover.net/1/messages.json"
  API_KEY=$PUSHOVER_API_KEY
  USER_KEY=$PUSHOVER_USER_KEY
  DEVICE=$PUSHOVER_DEVICE

  TITLE="${1}"
  MESSAGE="${2}"

  curl \
  -F "token=${API_KEY}" \
  -F "user=${USER_KEY}" \
  -F "device=${DEVICE}" \
  -F "title=${TITLE}" \
  -F "message=${MESSAGE}" \
  "${PUSHOVERURL}" > /dev/null 2>&1
}

# try
try() {
  echo $0
  echo $1

    dir=$(mktemp -d $1XXXXX 2>/dev/null || mktemp -d -t 'go')
    cd "$dir"
    echo "Current directory changed: $PWD"
    touch README

if [[ $1 == A ]]; then
    echo "A"
else
    cat > main.go << EOF
package main

import (
    "fmt"
)
func main() {
    fmt.Println("hello go")
}
EOF
fi
}

no_proxy_for_minikube() {
  export no_proxy=$no_proxy,$(minikube ip)
}

# https://ctxt.io/
# hastebin.com
# cat file | haste  or cat file | haste --raw
haste() { a=$(cat); curl -X POST -s -d "$a" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}'; }



# https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#without-kubectl-proxy
function login_token(){
kubectl get secrets | grep ^default | cut -f1 -d ' ' | kubectl describe secret | grep -E '^token' | cut -f2 -d':' | tr -d " "
echo "for more, open this url https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#without-kubectl-proxy"
}

function cat_and_kubectl_apply(){
echo 'demo as below....'
echo 'cat <<EOF | kubectl create -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
EOF'
}

function curl_and_kubectl_apply(){
	echo 'demo as below....'
	echo 'curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/namespace.yaml \ | kubectl apply -f -'
}

# list all tenant namespace
function list_tenant_namespaces() {
  kubectl get namespace -l namespace-role=tenant -o json | jq -r '.items[] | .metadata.name'
}

# list url for every tenant
function list_tenant_urls() {
  kubectl get namespace -l namespace-role=tenant -o json \
    |    jq -r '.items[] | .metadata.name'  \
    | xargs -I{} kubectl get mapping -n {} -o json | jq -r '.items[] | .spec.host'
}

# list all releases and namespaces for tenants
function list_tenant_releases_and_namespaces() {
  helm ls | cut -f 1,7 | grep tenant- | xargs -n2 sh -c 'echo "release $0 is in namespace $1"'
}
